<?xml version="1.0" encoding="utf-8"?>
<plasterManifest version='0.1.0'>
    <metadata>
        <id>Unique-Template-Pkg-Name</id>
        <!-- For display by UI's in a menu list -->
        <title>New Module</title>
        <!-- For display by UI's in hover help -->
        <description>Plaster template for creating the files for a PowerShell module.</description>
        <version>0.1.0</version>
        <tags>Module, ModuleManifest, Build</tags>
    </metadata>
    <parameters>
        <parameter name='ModuleName' type='input' required='true' prompt='Enter the name of the module'/>
        <parameter name='Version' type='input' default='0.0.1' store='true' prompt='Enter the version number for the module'/>
        <parameter name='FullName' type='input' required='true' prompt='Enter your fullname'/>
        <parameter name='Pester' type='multichoice' default='0' prompt='Add Pester Support?'>
            <choice label='&amp;Yes'
                    help="Adds Tests directory and a starter Pester Tests file."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores Pester Tests"
                    value="No"/>
        </parameter>
        <parameter name='PSake' type='multichoice' default='0' prompt='Add PSake Support?'>
            <choice label='&amp;Yes'
                    help="Adds a PSake build scripts."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores PSake"
                    value="No"/>
        </parameter>
        <parameter name='PSDeploy' type='multichoice' default='0' prompt='Add PSDeploy Support?'>
            <choice label='&amp;Yes'
                    help="Adds a PSDeploy script."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores PSDeploy"
                    value="No"/>
        </parameter>
        <parameter name='AppVeyor' type='multichoice' default='0' prompt='Add AppVeyor Support?'>
            <choice label='&amp;Yes'
                    help="Adds AppVeyor.yml and Build.ps1 Files."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores AppVeyor"
                    value="No"/>
        </parameter>
        <parameter name='Git' type='multichoice' default='0' prompt='Add Git Support?'>
            <choice label='&amp;Yes'
                    help="Adds a .gitignore file."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores Git"
                    value="No"/>
        </parameter>
        <parameter name='PlatyPS' type='multichoice' default='0' prompt='Add PlatyPS Support?'>
            <choice label='&amp;Yes'
                    help="Adds docs folder"
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores PlatyPS"
                    value="No"/>
        </parameter>
        <parameter name='ReadTheDocs' type='multichoice' default='0' prompt='Add ReadTheDocs Support?'>
            <choice label='&amp;Yes'
                    help="Adds a mkdocs.yml file."
                    value="Yes"/>
            <choice label='&amp;No'
                    help="Ignores ReadTheDocs"
                    value="No"/>
        </parameter>
        <parameter name='Editor' type='choice' default='1' prompt='Which editor do you use'>
            <choice label='&amp;ISE'
                    help="Your editor is PowerShell ISE."
                    value="ISE"/>
            <choice label='Visual Studio &amp;Code'
                    help="Your editor is Visual Studio Code."
                    value="VSCode"/>
            <choice label='&amp;None'
                    help="No editor specified."
                    value="None"/>
        </parameter>
        <parameter name='License' type='choice' default='1' prompt='Select a license for your module'>
            <choice label='&amp;Apache'
                    help="Adds an Apache license file."
                    value="Apache"/>
            <choice label='&amp;MIT'
                    help="Adds an MIT license file."
                    value="MIT"/>
            <choice label='&amp;None'
                    help="No license specified."
                    value="None"/>
        </parameter>
    </parameters>
    <dependencies>
        <dependency id="another-template-id??"/>
    </dependencies>
    <content>
        <message>
Scaffold a PowerShell Module with the files required for Pester tests, PSake, PSDeploy. PlatyPS, ReadTheDocs, AppVeyor and publish to the PSGallery.

        </message>
        <newModuleManifest destination='${PLASTER_PARAM_ModuleName}\${PLASTER_PARAM_ModuleName}.psd1'
                           moduleVersion='$PLASTER_PARAM_Version'
                           rootModule='${PLASTER_PARAM_ModuleName}.psm1'
                           author='$PLASTER_PARAM_FullName'/>
        <!--Module-->
        <file source='Module.psm1'
              destination='${PLASTER_PARAM_ModuleName}\${PLASTER_PARAM_ModuleName}.psm1'/>
        <file source=''
              destination='${PLASTER_PARAM_ModuleName}\Private'/>
        <file source=''
              destination='${PLASTER_PARAM_ModuleName}\Public'/>
        <file source='README.md'
              destination='README.md'
              template='true'/>
        <file source='CHANGELOG.md'
              destination='CHANGELOG.md'
              template='true'/>
        <file source='en-US\about_Module.help.txt'
              destination='${PLASTER_PARAM_ModuleName}\en-US\about_${PLASTER_PARAM_ModuleName}.help.txt'
              template='true'/>
        <file source='DebugModule.ps1'
              destination='Debug${PLASTER_PARAM_ModuleName}.ps1'
              template='true'/>
        <!--Git-->
        <file source='_gitignore'
              destination='.gitignore'
              condition='$PLASTER_PARAM_git -eq "Yes"'
              template='true'/>
        <!--License-->
        <file source='ApacheLicense.txt'
              destination='LICENSE.txt'
              template='true'
              condition="$PLASTER_PARAM_License -eq 'Apache'"/>
        <file source='MITLicense.txt'
              destination='LICENSE.txt'
              template='true'
              condition="$PLASTER_PARAM_License -eq 'MIT'"/>
        <!--PSake-->
        <file source='Build.PSake.ps1'
              destination='Build.PSake.ps1'
              template='true'
              condition='$PLASTER_PARAM_PSake -eq "Yes"'/>
        <!--AppVeyor-->
        <file source='Build.ps1'
              destination='Build.ps1'
              condition='$PLASTER_PARAM_AppVeyor -eq "Yes"'/>
        <file source='appveyor.yml'
              destination='appveyor.yml'
              condition='$PLASTER_PARAM_AppVeyor -eq "Yes"'/>
        <!--PSDeploy-->
        <file source='Build.PSDeploy.ps1'
              destination='Build.PSDeploy.ps1'
              template='true'
              condition='$PLASTER_PARAM_PSDeploy -eq "Yes"'/>
        <!--PlatyPS-->
        <file source=''
              destination='docs'
              condition="$PLASTER_PARAM_PlatyPS -eq 'Yes'"/>
        <!--ReadTheDocs-->
        <file source=''
              destination='docs\Commands'
              condition="$PLASTER_PARAM_ReadTheDocs -eq 'Yes'"/>
        <file source='docs\index.md'
              destination='docs\index.md'
              template='true'
              condition="$PLASTER_PARAM_ReadTheDocs -eq 'Yes'"/>
        <file source='mkdocs.yml'
              destination='mkdocs.yml'
              template='true'
              condition="$PLASTER_PARAM_ReadTheDocs -eq 'Yes'"/>
        <!--Pester-->
        <file source='Tests\Module.Manifest.T.ps1'
              destination='Tests\Module.Manifest.Tests.ps1'
              template='true'
              condition="$PLASTER_PARAM_Pester -eq 'Yes'"/>
        <file source='Tests\Module.Links.T.ps1'
              destination='Tests\Module.Links.Tests.ps1'
              condition="$PLASTER_PARAM_Pester -eq 'Yes'"/>
        <file source='Tests\Module.Help.T.ps1'
              destination='Tests\Module.Help.Tests.ps1'
              template='true'
              condition="$PLASTER_PARAM_Pester -eq 'Yes'"/>
        <!--Editor-->
        <file source='launch.json'
              destination='.vscode\launch.json'
              condition="$PLASTER_PARAM_Editor -eq 'VSCode'"/>
        <file source='EditorCommands.ps1'        
              destination='${PLASTER_PARAM_ModuleName}\EditorCommands.ps1'
              template='true'
              condition="$PLASTER_PARAM_Editor -eq 'VSCode'"/>
        <file source='tasks.json'
              destination='.vscode\tasks.json'
              template='true'
              condition="$PLASTER_PARAM_Editor -eq 'VSCode'"/>
        <modify path='.vscode\tasks.json'
                encoding='utf8'
                condition="$PLASTER_PARAM_Editor -eq 'VSCode'">
            <replace condition="$PLASTER_FileContent -notmatch '// Author:'">
                <original>(?s)^(.*)</original>
                <substitute expand='true'>``$1`r`n// Author: $PLASTER_PARAM_FullName</substitute>
            </replace>
            <!--Pester-->
            <replace condition="$PLASTER_PARAM_Pester -eq 'Yes' -and $PLASTER_FileContent -notmatch 'taskName&quot;:\s*&quot;Test&quot;'">
                <original><![CDATA[(?si)(?<="tasks":\s*\[)(\s*)(?=\{)]]></original>
                <substitute><![CDATA[$1{
            "taskName": "Test",
            "suppressTaskName": true,
            "isTestCommand": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Pester...'; Invoke-Pester -PesterOption @{IncludeVSCodeMarker=$true};",
                "Invoke-Command { Write-Host 'Completed Test task in task runner.' }"
            ],
            "problemMatcher": [
                {
                    "owner": "powershell",
                    "fileLocation": ["absolute"],
                    "severity": "error",
                    "pattern": [
                        {
                            "regexp": "^\\s*(\\[-\\]\\s*.*?)(\\d+)ms\\s*$",
                            "message": 1
                        },
                        {
                            "regexp": "^\\s+at\\s+[^,]+,\\s*(.*?):\\s+line\\s+(\\d+)$",
                            "file": 1,
                            "line": 2
                        }
                    ]
                }
            ]
        },$1]]></substitute>
            </replace>
            <!--Build-->
            <replace condition="$PLASTER_PARAM_PSake -eq 'Yes' -and $PLASTER_FileContent -notmatch 'taskName&quot;:\s*&quot;Build&quot;'">
                <original><![CDATA[(?si)(?<="tasks":\s*\[)(\s*)(?=\{)]]></original>
                <substitute><![CDATA[$1{
            "taskName": "Build",
            "suppressTaskName": true,
            "isBuildCommand": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking PSake...'; Invoke-PSake build.PSake.ps1 -taskList Build;",
                "Invoke-Command { Write-Host 'Completed Build task in task runner.' }"
            ]
        },$1]]></substitute>
            </replace>
            <!--Deploy-->
            <replace condition="$PLASTER_PARAM_PSake -eq 'Yes' -and $PLASTER_FileContent -notmatch 'taskName&quot;:\s*&quot;Deploy&quot;'">
                <original><![CDATA[(?si)(?<="tasks":\s*\[)(\s*)(?=\{)]]></original>
                <substitute><![CDATA[$1{
            "taskName": "Deploy",
            "suppressTaskName": true,            
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking PSake...'; Invoke-PSake build.PSake.ps1 -taskList Deploy;",
                "Invoke-Command { Write-Host 'Completed Deploy task in task runner.' }"
            ]
        },$1]]></substitute>
            </replace>
        </modify>

        <message nonewline='true'>`n`nYour new PowerShell module project $PLASTER_PARAM_ModuleName </message>
        <message>has been created.</message>

    </content>
</plasterManifest>